Kuinka vältän kurssilla esiintyneet tietoturva ongelmat?

Työskenneltäessä arvokkaan datan kanssa, lienee olisi järkevää ottaa käyttöön jotkin vakioidut tarkastusmenetelmät,
jolla valmiin ohjelman voisi vielä lopuksi tarkastaa selvinpien haavoittuvuuksien varalta. Tai ylipäätään,
koostaa lista asioista, jotka täytyisi koodissa toteutua tietoturva-mielessä.
Pyörää ei myöskään itse kannata uudelleen keksiä, jos hyväksi todettuja vaihtoehtoja on tarjolla. Alla kappaleittain pohdintoja
kurssin sisällön pääpiirteisiin osa-alueihin, ja niissä ilmenevien ongelmien estoon, sekä ennaltaehkäisyyn.

Tiedostopolkujen käsittelyssä tulisi pyrkiä välttämään suhteellisia polkuja. Käytetyt polut voisi normalisoida,
jotta päästään eroon tarpeettomista elementeistä. Syytä olisi huomioida myös käytettävissä olevat merkistöt, jolla
polkuja voidaan manipuloida. Huomioina esim. unicode, jolla vaikkapa ehto (if ".." in polku:) pystytään kiertämään.

Tietokantoja yhteydessä esiin nousee SQL-injektioihin varautuminen. Niiden torjunnassa olennaista lienee toteuttaa
käyttäjän syötteen käsittely esim. parametrisoituna(rakenteinen-data), ja
valmisteltuja lausekkeita hyödyntäen.

Ei ole tavatonta, että sovellus käynnistää oman toimintansa ohessa ulkoisiakin prosesseja. Tällöin on ohjelmalla riski joutua
shell-injektioiden kohteeksi. Tässäkin tilanteessa käsitellään merkkijonoja, joten rakenteen lisääminen voisi olla ensitoimi
turvallisempaan koodiin. Pohtia kannattanee sitäkin, onko aliprosessien käynnistäminen komentotulkin kautta välttämättömyys.
Jos näin kuitenkin on, on oletettavaa, että väylä on tarjolla ympäristömuuttujiin ja tiedostokahvoihin, joten ne kannattanee nollata
ennen käynnistystä. 

XSS:n osalta, esim. käyttäjän syötteet osaksi v-sivua ja siten html:n sisällöksi aiheuttaa vaaran esim. pääsynhallinnan
kiertämiselle. Kehittäjänä koodin siistimisellä(escaping) voidaan poistaa "räikemmät"-haavoittuvuudet. Myös jäsentäminen
ja erikseen sallimattomien tunnisteiden, sekä attribuuttien riisuminen ennen tulostusta, vähentää hyökkäyspinta-alaa.

Kokonaislukujen ylivuotoihin liittyvät haavoittuvuudet taas voivat mm. invalidoida ohjelman muita luokkia suojaavia
tarkistuksia. Ylivuodoilta olisi helppo suojautua käyttämällä kieltä, joka mahdollistaa dynaamiset muuttujat. Muutoin, täytyy
rajoittaa sitä, esim. laskutoimitusten osalta, ettei vaikkapa käyttäjä voi syöttää liian suurta lukua kertolaskun parametriksi.

Ajastushyökkäyksiltä suojautuminen on sekin olennainen osa tietoturvaa. Helppo ratkaisu olisi vakioida esim. jonoille tehtäviin
operaatoihin käytetty aika, tehden ajastuksen hyökkääjän kannalta turhaksi. Tämä tosin aiheuttaa kustannuksia, niissä tapauksissa
jossa käyttäjän syötteet ovat "minimaalisia".

Kehittäjänä on luonnollisesti alttius joutua riippuvussuhde-hyökkäyksien kohteeksi. Näin ollen, on hyödyllistä on ymmärtää mm. 
käyttämänsä pakettimanagerin toimintaa. Hyvä on tiedostaa sekin, että tarjolla liikkuu saastutettuja, että näköispaketteja.
Olisi siis järkevää perehtyä, käytettävän paketin käyttömääriin, ylläpitoon yms. asioihin, jotka voisivat indikoida vihamielisestä
toiminnasta. 

Ohjelmien toiminnan kannalta voitaneen puhua normaalista, kun käytetään lokitusta. Lokien kohdalla jälleen rakenteinen data,
formatointi, ja syötteen sanitointi, estänee pitkälle ei haluttua toimintaa.
